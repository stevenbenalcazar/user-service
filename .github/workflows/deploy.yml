name: Deploy User Service

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🛠️ Clonar el Repositorio
        uses: actions/checkout@v3

      - name: 🔨 Construir y Subir Imagen a Docker Hub
        run: |
          docker build -t user-service .
          docker tag user-service:latest ${{ secrets.DOCKER_USERNAME }}/user-service:latest
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/user-service:latest

      - name: 🚀 Desplegar en AWS EC2
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 400 private_key.pem

          ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST << EOF
            echo "🔍 Verificando red Docker..."
            docker network ls | grep taskify-network || docker network create taskify-network

            echo "📥 Descargando nueva imagen desde Docker Hub..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/user-service:latest

            echo "🛑 Deteniendo y eliminando el contenedor anterior..."
            docker stop user-service || true
            docker rm user-service || true

            echo "🚀 Iniciando nuevo contenedor..."
            docker run -d --name user-service -p 3000:3000 --network=taskify-network \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_NAME=dbusers \
              -e DB_USER=user_db \
              -e DB_PASSWORD=12345 \
              -e JWT_SECRET=supersecretkey \
              ${{ secrets.DOCKER_USERNAME }}/user-service:latest

            echo "✅ Despliegue completado."
          EOF

          rm -f private_key.pem
